name: Check Environment

# This workflow runs after the "Receive PR" workflow completes
# It has access to secrets and can safely check them
on:
  workflow_run:
    workflows: ["Receive PR"]
    types:
      - completed

jobs:
  check-environment:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    steps:
      - name: "Download artifact"
        uses: actions/github-script@v7
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/pr.zip', Buffer.from(download.data));

      - name: Extract PR info
        run: unzip pr.zip

      - name: Check environment variables
        id: check-env
        run: |
          if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "ERROR: GITHUB_TOKEN is empty or not set!"
            exit 1
          else
            echo "SUCCESS: Environment variables are properly configured"
          fi

      - name: "Update comment with environment check results"
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            var issue_number = Number(fs.readFileSync('./NR'));
            
            // Check if previous steps failed
            const checkResult = '${{ steps.check-env.outcome }}';
            const envMessage = checkResult === 'success' 
              ? '‚úÖ Environment check passed!'
              : '‚ùå Environment check failed!';
            
            // Retry logic for concurrent updates
            for (let attempt = 0; attempt < 3; attempt++) {
              try {
                // Find existing bot comment
                const comments = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue_number
                });
                
                const botComment = comments.data.find(comment => 
                  comment.user.login === 'github-actions[bot]' && 
                  comment.body.includes('Running tests in the background')
                );
                
                if (botComment) {
                  // Update specific section of the comment
                  let currentBody = botComment.body;
                  
                  // Remove existing environment check section
                  currentBody = currentBody.replace(/<!-- ENV_CHECK_START -->[\s\S]*?<!-- ENV_CHECK_END -->/g, '');
                  
                  // Add new environment check section
                  const envSection = `<!-- ENV_CHECK_START -->\n**Environment Check:** ${envMessage}\n<!-- ENV_CHECK_END -->`;
                  currentBody = currentBody.trim() + '\n\n' + envSection;
                  
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComment.id,
                    body: currentBody
                  });
                  break; // Success, exit retry loop
                } else {
                  // Fallback: create new comment if not found
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue_number,
                    body: `üîÑ Running tests in the background... Please wait while we check the repository configuration.\n\n<!-- ENV_CHECK_START -->\n**Environment Check:** ${envMessage}\n<!-- ENV_CHECK_END -->`
                  });
                  break;
                }
              } catch (error) {
                console.log(`Attempt ${attempt + 1} failed: ${error.message}`);
                if (attempt === 2) throw error; // Re-throw on final attempt
                await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second before retry
              }
            }